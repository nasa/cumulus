Resources:
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups:
%{ for s in security_group_ids ~}
        - ${s}
%{ endfor ~}
      ImageId: ${image_id}
      InstanceType: ${instance_type}
      IamInstanceProfile: ${instance_profile}
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdcz"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: ${docker_volume_size}
%{ if key_name != null ~}
      KeyName: ${key_name}
%{ endif ~}
      UserData:
        Fn::Base64: |
          Content-Type: multipart/mixed; boundary="==BOUNDARY=="
          MIME-Version: 1.0

          --==BOUNDARY==
          Content-Type: text/cloud-boothook; charset="us-ascii"

          vgcreate docker /dev/xvdcz

          lvcreate -n docker-data -L${docker_volume_create_size}G docker

          mkfs.xfs /dev/docker/docker-data
          mkdir /docker-data
          mount /dev/docker/docker-data /docker-data

          sed -i '/^\s*DOCKER_STORAGE_OPTIONS=/d' /etc/sysconfig/docker-storage
          echo 'DOCKER_STORAGE_OPTIONS="--storage-driver overlay2"' >> /etc/sysconfig/docker-storage

          sed -i '/^\s*OPTIONS=/d' /etc/sysconfig/docker
          echo 'OPTIONS="--default-ulimit nofile=1024:4096 --data-root=/docker-data"' >> /etc/sysconfig/docker

%{ if include_docker_cleanup_cronjob == true ~}
          echo '* * * * * sudo sh -c "docker ps -q | xargs docker inspect --format='\{{.State.Pid}}' | xargs -IZ fstrim /proc/Z/root/"' | crontab -
%{ endif ~}

          --==BOUNDARY==
          Content-Type: text/x-shellscript; charset="us-ascii"

%{ if efs_dns_name != null && efs_mount_point != null ~}
          AZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)

          if ! rpm -q nfs-utils >/dev/null 2>&1; then
            yum install -y nfs-utils
          fi

          mkdir -p ${efs_mount_point}
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${efs_dns_name}:/ ${efs_mount_point}
          chmod 777 ${efs_mount_point}

          service docker restart

%{ endif ~}
          cat <<'EOF' >> /etc/ecs/ecs.config
          ECS_CLUSTER=${cluster_name}
          ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1m
          ECS_CONTAINER_STOP_TIMEOUT=${container_stop_timeout}
          EOF

%{ if docker_hub_config != null ~}
          echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config
          echo 'ECS_ENGINE_AUTH_DATA={"https://index.docker.io/v1/":{"username":"${docker_hub_config.username}","password": "${docker_hub_config.password}","email":"${docker_hub_config.email}"}}' >> /etc/ecs/ecs.config

%{ endif ~}
          if ! which aws >/dev/null 2>&1; then
            yum install -y jq unzip
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            rm -rf ./awscli-bundle awscli-bundle.zip
          fi

          aws s3 cp s3://${task_reaper_object.bucket}/${task_reaper_object.key} /usr/local/bin/task-reaper.sh
          chmod +x /usr/local/bin/task-reaper.sh
          echo "$(echo '0,30 * * * * /usr/sbin/logrotate -v /etc/logrotate.conf' ; crontab -l)" | crontab -
          sed -i 's/size.*/size 100M\n    dateformat -%Y%m%d%s\n    copytruncate/' /etc/logrotate.d/awslogs
          sed -i 's/rotate 4/rotate 2/' /etc/logrotate.d/awslogs
          cat <<'EOF' >> /etc/cron.d/task-reaper
          PATH=/bin:/usr/local/bin
          AWS_DEFAULT_REGION=${region}
          LIFECYCLE_HOOK_NAME=${cluster_name}-ecs-termination-hook
          * * * * * root /usr/local/bin/task-reaper.sh >> /var/log/task-reaper.log 2>&1
          EOF

          --==BOUNDARY==--

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: ${min_size}
    Properties:
      VPCZoneIdentifier:
%{ for s in subnet_ids ~}
        - ${s}
%{ endfor ~}
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: ${min_size}
      DesiredCapacity: ${desired_capacity}
      MaxSize: ${max_size}
      Tags:
        - Key: Name
          Value: ${cluster_name}
          PropagateAtLaunch: true
Outputs:
  AutoscalingGroupName:
    Value: !Ref AutoScalingGroup
