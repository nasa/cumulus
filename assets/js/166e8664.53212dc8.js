"use strict";(self.webpackChunk_cumulus_website=self.webpackChunk_cumulus_website||[]).push([[27001],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>g});var n=a(296540);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach(function(t){o(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef(function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(a),m=o,g=d["".concat(i,".").concat(m)]||d[m]||c[m]||r;return a?n.createElement(g,l(l({ref:t},p),{},{components:a})):n.createElement(g,l({ref:t},p))});function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:o,l[1]=s;for(var u=2;u<r;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},173290:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/sips-provider-7f4b6505a7be7748ebac8acdb03f730f.png"},505596:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var n=a(58168),o=a(198587),r=(a(296540),a(15680)),l=["components"],s={id:"sips-workflow",title:"Science Investigator-led Processing Systems (SIPS)",hide_title:!1},i=void 0,u={unversionedId:"data-cookbooks/sips-workflow",id:"version-v21.0.0/data-cookbooks/sips-workflow",title:"Science Investigator-led Processing Systems (SIPS)",description:"The Cumulus ingest workflow supports the SIPS workflow. In the following document, we'll discuss what a SIPS workflow is and how to set one up in a Cumulus instance.",source:"@site/versioned_docs/version-v21.0.0/data-cookbooks/sips-workflow.md",sourceDirName:"data-cookbooks",slug:"/data-cookbooks/sips-workflow",permalink:"/cumulus/docs/v21.0.0/data-cookbooks/sips-workflow",draft:!1,tags:[],version:"v21.0.0",lastUpdatedBy:"Nate Pauzenga",lastUpdatedAt:1757435638,formattedLastUpdatedAt:"Sep 9, 2025",frontMatter:{id:"sips-workflow",title:"Science Investigator-led Processing Systems (SIPS)",hide_title:!1},sidebar:"docs",previous:{title:"Ingest Notification in Workflows",permalink:"/cumulus/docs/v21.0.0/data-cookbooks/ingest-notifications"},next:{title:"CNM Workflow",permalink:"/cumulus/docs/v21.0.0/data-cookbooks/cnm-workflow"}},p={},d=[{value:"Setup",id:"setup",level:2},{value:"Provider",id:"provider",level:3},{value:"Collection",id:"collection",level:3},{value:"Rule",id:"rule",level:3},{value:"DiscoverAndQueuePdrs Workflow",id:"discoverandqueuepdrs-workflow",level:2},{value:"ParsePdr Workflow",id:"parsepdr-workflow",level:2},{value:"Granule Uniquification",id:"granule-uniquification",level:3},{value:"IngestGranule Workflow",id:"ingestgranule-workflow",level:2},{value:"Summary",id:"summary",level:2}],c={toc:d},m="wrapper";function g(e){var t=e.components,s=(0,o.A)(e,l);return(0,r.yg)(m,(0,n.A)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"The Cumulus ingest workflow supports the SIPS workflow. In the following document, we'll discuss what a SIPS workflow is and how to set one up in a Cumulus instance."),(0,r.yg)("p",null,"In this document, we assume the user already has a provider endpoint configured and ready with some data to ingest. We'll be using an S3 provider and ingesting from a MOD09GQ collection."),(0,r.yg)("h2",{id:"setup"},"Setup"),(0,r.yg)("h3",{id:"provider"},"Provider"),(0,r.yg)("p",null,"We need to have a ",(0,r.yg)("a",{parentName:"p",href:"/cumulus/docs/v21.0.0/configuration/data-management-types#providers"},"provider")," from whom data can be ingested. Our provider is an S3 provider hosted in the ",(0,r.yg)("inlineCode",{parentName:"p"},"cumulus-test-internal")," bucket."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Screenshot of Cumulus dashboard screen for configuring an S3 provider",src:a(173290).A,width:"1075",height:"602"})),(0,r.yg)("h3",{id:"collection"},"Collection"),(0,r.yg)("p",null,"We need to build a collection. Details on collections can be found\n",(0,r.yg)("a",{parentName:"p",href:"/cumulus/docs/v21.0.0/configuration/data-management-types#collections"},"here"),". The following collection will have\n",(0,r.yg)("inlineCode",{parentName:"p"},"MOD09GQ")," as a collection name, ",(0,r.yg)("inlineCode",{parentName:"p"},"006")," as a version."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "MOD09GQ",\n  "version": "006",\n  "process": "modis",\n  "sampleFileName": "MOD09GQ.A2017025.h21v00.006.2017034065104.hdf",\n  "granuleIdExtraction": "(MOD09GQ\\\\..*)(\\\\.hdf|\\\\.cmr|_ndvi\\\\.jpg)",\n  "granuleId": "^MOD09GQ\\\\.A[\\\\d]{7}\\\\.[\\\\S]{6}\\\\.006\\\\.[\\\\d]{13}$",\n  "files": [\n    {\n      "bucket": "protected",\n      "regex": "^MOD09GQ\\\\.A[\\\\d]{7}\\\\.[\\\\S]{6}\\\\.006\\\\.[\\\\d]{13}\\\\.hdf$",\n      "sampleFileName": "MOD09GQ.A2017025.h21v00.006.2017034065104.hdf",\n      "url_path": "{cmrMetadata.Granule.Collection.ShortName}/{extractYear(cmrMetadata.Granule.Temporal.RangeDateTime.BeginningDateTime)}/{substring(file.fileName, 0, 3)}"\n    },\n    {\n      "bucket": "private",\n      "regex": "^MOD09GQ\\\\.A[\\\\d]{7}\\\\.[\\\\S]{6}\\\\.006\\\\.[\\\\d]{13}\\\\.hdf\\\\.met$",\n      "sampleFileName": "MOD09GQ.A2017025.h21v00.006.2017034065104.hdf.met"\n    },\n    {\n      "bucket": "protected-2",\n      "regex": "^MOD09GQ\\\\.A[\\\\d]{7}\\\\.[\\\\S]{6}\\\\.006\\\\.[\\\\d]{13}\\\\.cmr\\\\.xml$",\n      "sampleFileName": "MOD09GQ.A2017025.h21v00.006.2017034065104.cmr.xml"\n    },\n    {\n      "bucket": "public",\n      "regex": "^MOD09GQ\\\\.A[\\\\d]{7}\\\\.[\\\\S]{6}\\\\.006\\\\.[\\\\d]{13}_ndvi\\\\.jpg$",\n      "sampleFileName": "MOD09GQ.A2017025.h21v00.006.2017034065104_ndvi.jpg"\n    }\n  ],\n  "duplicateHandling": "replace",\n  "url_path": "{cmrMetadata.Granule.Collection.ShortName}/{substring(file.fileName, 0, 3)}",\n}\n')),(0,r.yg)("h3",{id:"rule"},"Rule"),(0,r.yg)("p",null,"Finally, let's create a ",(0,r.yg)("a",{parentName:"p",href:"/cumulus/docs/v21.0.0/configuration/data-management-types#rules"},"rule"),". In this example\nwe're just going to create a ",(0,r.yg)("inlineCode",{parentName:"p"},"onetime")," throw-away rule that will be easy to test\nwith. This rule will kick off the ",(0,r.yg)("inlineCode",{parentName:"p"},"DiscoverAndQueuePdrs")," workflow, which is the\nbeginning of a Cumulus SIPS workflow:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Screenshot of a Cumulus rule configuration",src:a(792219).A,width:"2448",height:"1784"})),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},'A list of configured workflows exists under the "Workflows" in the navigation bar on the Cumulus dashboard. Additionally, one can find a list of executions and their respective status in the "Executions" tab in the navigation bar.')),(0,r.yg)("h2",{id:"discoverandqueuepdrs-workflow"},"DiscoverAndQueuePdrs Workflow"),(0,r.yg)("p",null,"This workflow will discover PDRs and queue them to be processed. Duplicate PDRs will be dealt with according to the configured duplicate handling setting in the collection.   The lambdas below are included in the ",(0,r.yg)("inlineCode",{parentName:"p"},"cumulus")," terraform module for use in your workflows:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"DiscoverPdrs - ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nasa/cumulus/tree/master/tasks/discover-pdrs"},"source")),(0,r.yg)("li",{parentName:"ol"},"QueuePdrs - ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nasa/cumulus/tree/master/tasks/queue-pdrs"},"source"))),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Screenshot of execution graph for discover and queue PDRs workflow in the AWS Step Functions console",src:a(724037).A,width:"385",height:"461"})),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"An example workflow module configuration can be viewed in the Cumulus source for the ",(0,r.yg)("a",{parentName:"em",href:"https://github.com/nasa/cumulus/blob/master/example/cumulus-tf/discover_and_queue_pdrs_workflow.tf"},"discover_and_queue_pdrs_workflow"),".")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"To use this example workflow module as a template for a new workflow in your deployment the ",(0,r.yg)("inlineCode",{parentName:"p"},"source")," key for the workflow module would need to point to a release of the cumulus-workflow (terraform-aws-cumulus-workflow.zip) module on our ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/nasa/cumulus/releases"},"release")," page, as all of the provided Cumulus workflows are internally self-referential.")),(0,r.yg)("h2",{id:"parsepdr-workflow"},"ParsePdr Workflow"),(0,r.yg)("p",null,"The ParsePdr workflow will parse a PDR, queue the specified granules (duplicates are handled according to the duplicate handling setting) and periodically check the status of those queued granules. This workflow will not succeed until all the granules included in the PDR are successfully ingested. If one of those fails, the ParsePdr workflow will fail. ",(0,r.yg)("strong",{parentName:"p"},"NOTE")," that ParsePdr may spin up multiple IngestGranule workflows in parallel, depending on the granules included in the PDR."),(0,r.yg)("p",null,"The lambdas below are included in the ",(0,r.yg)("inlineCode",{parentName:"p"},"cumulus")," terraform module for use in your workflows:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"ParsePdr - ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nasa/cumulus/tree/master/tasks/parse-pdr"},"source")),(0,r.yg)("li",{parentName:"ol"},"QueueGranules - ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nasa/cumulus/tree/master/tasks/queue-granules"},"source")),(0,r.yg)("li",{parentName:"ol"},"CheckStatus - ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nasa/cumulus/tree/master/tasks/pdr-status-check"},"source"))),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Screenshot of execution graph for SIPS Parse PDR workflow in AWS Step Functions console",src:a(915361).A,width:"1214",height:"780"})),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"An example workflow module configuration can be viewed in the Cumulus source for the ",(0,r.yg)("a",{parentName:"em",href:"https://github.com/nasa/cumulus/blob/master/example/cumulus-tf/parse_pdr_workflow.tf"},"parse_pdr_workflow"),".")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"To use this example workflow module as a template for a new workflow in your deployment the ",(0,r.yg)("inlineCode",{parentName:"p"},"source")," key for the workflow module would need to point to a release of the cumulus-workflow (terraform-aws-cumulus-workflow.zip) module on our ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/nasa/cumulus/releases"},"release")," page, as all of the provided Cumulus workflows are internally self-referential.")),(0,r.yg)("h3",{id:"granule-uniquification"},"Granule Uniquification"),(0,r.yg)("p",null,"This ingest flow can optionally take advantage of the ",(0,r.yg)("a",{parentName:"p",href:"/cumulus/docs/v21.0.0/features/granule_uniquification"},"Granule Uniquification")," feature by setting the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/nasa/cumulus/tree/master/tasks/parse-pdr"},"ParsePdr")," configuration option ",(0,r.yg)("inlineCode",{parentName:"p"},"uniquifyGranuleId")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,r.yg)("p",null,"Setting this option will cause ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/nasa/cumulus/tree/master/tasks/parse-pdr/README.md"},"ParsePdr")," to assign a unique ",(0,r.yg)("inlineCode",{parentName:"p"},"granuleId")," to each granule in the task, retaining the original identifier as ",(0,r.yg)("inlineCode",{parentName:"p"},"producerGranuleId"),"."),(0,r.yg)("p",null,"Downstream workflow components (e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"UpdateGranulesCmrMetadataFile"),") and the Cumulus Core will handle this modification as noted in the ",(0,r.yg)("a",{parentName:"p",href:"/cumulus/docs/v21.0.0/features/granule_uniquification"},"feature documentation")),(0,r.yg)("h2",{id:"ingestgranule-workflow"},"IngestGranule Workflow"),(0,r.yg)("p",null,"The IngestGranule workflow processes and ingests a granule and posts the granule metadata to CMR."),(0,r.yg)("p",null,"The lambdas below are included in the ",(0,r.yg)("inlineCode",{parentName:"p"},"cumulus")," terraform module for use in your workflows:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"SyncGranule - ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nasa/cumulus/tree/master/tasks/sync-granule"},"source"),"."),(0,r.yg)("li",{parentName:"ol"},"UpdateGranulesCmrMetadataFileLinksStep - ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nasa/cumulus/tree/master/tasks/update-granules-cmr-metadata-file-links"},"source")),(0,r.yg)("li",{parentName:"ol"},"CmrStep - ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nasa/cumulus/tree/master/tasks/post-to-cmr"},"source"))),(0,r.yg)("p",null,"Additionally this workflow requires a processing step you must provide. The ProcessingStep step in the workflow picture below is an example of a custom processing step."),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Using CmrStep, UpdateGranuleCmrMetadataFileLinks , HyraxProcessing, BackupGranuleToLzards is not required and can be left out of the processing trajectory if desired (for example, in testing situations or if you're not ingesting granules with CMR metadata).")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Screenshot of execution graph for SIPS IngestGranule workflow in AWS Step Functions console",src:a(882724).A,width:"1105",height:"1306"})),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"An example workflow module configuration can be viewed in the Cumulus source for the ",(0,r.yg)("a",{parentName:"em",href:"https://github.com/nasa/cumulus/blob/master/example/cumulus-tf/ingest_and_publish_granule_workflow.tf"},"ingest_and_publish_granule_workflow"),".")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"To use this example workflow module as a template for a new workflow in your deployment the ",(0,r.yg)("inlineCode",{parentName:"p"},"source")," key for the workflow module would need to point to a release of the cumulus-workflow (terraform-aws-cumulus-workflow.zip) module on our ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/nasa/cumulus/releases"},"release")," page, as all of the provided Cumulus workflows are internally self-referential.")),(0,r.yg)("h2",{id:"summary"},"Summary"),(0,r.yg)("p",null,"In this cookbook we went over setting up a collection, rule, and provider for a SIPS workflow. Once we had the setup completed, we looked over the Cumulus workflows that participate in parsing PDRs, ingesting and processing granules, and updating CMR."))}g.isMDXComponent=!0},724037:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/sips-discover-and-queue-pdrs-execution-a42d8466ce9191f0c9acdd67275115b9.png"},792219:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/add_rule-39d552773bdb983a8e9fd3a55206b251.png"},882724:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/sips-ingest-granule-4dfbf012a571bdfe53ba451c51d6e23a.png"},915361:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/sips-parse-pdr-1d17e815af06858b23d07847d5c0ec6e.png"}}]);